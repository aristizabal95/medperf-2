from medperf.exceptions import CleanExit
from medperf.utils import dict_pretty_print, approval_prompt
from medperf.entities.execution import Execution
from medperf import config


class ResultSubmission:
    @classmethod
    def run(cls, execution_uid, approved=False):
        sub = cls(execution_uid, approved=approved)
        sub.get_execution()
        updated_result_dict = sub.update_execution()
        sub.write(updated_result_dict)

    def __init__(self, execution_uid, approved=False):
        self.execution_uid = execution_uid
        self.comms = config.comms
        self.ui = config.ui
        self.approved = approved

    def get_execution(self):
        # Don't get the remote results, as they would be incomplete at this point
        self.execution = Execution.get(self.execution_uid, local_only=True)

    def request_approval(self):
        dict_pretty_print(self.execution.results)
        self.ui.print("Above are the results generated by the model")

        approved = approval_prompt(
            "Do you approve uploading the presented results to the MedPerf? [Y/n]"
        )

        return approved

    def update_execution(self):
        approved = self.approved or self.request_approval()

        if not approved:
            raise CleanExit("Results upload operation cancelled")


        uid = self.execution_uid
        body = self.execution.todict()
        updated_exec_dict = config.comms.update_execution(uid, body)
        return updated_exec_dict

    def write(self, updated_result_dict):
        result = Execution(**updated_result_dict)
        result.write()
