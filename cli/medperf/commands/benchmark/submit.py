import os
import shutil
import logging
from medperf.enums import Status
import validators

import medperf.config as config
from medperf.entities.benchmark import Benchmark
from medperf.utils import get_file_sha1, generate_tmp_uid, storage_path
from medperf.commands.compatibility_test import CompatibilityTestExecution
from medperf.exceptions import InvalidArgumentError, InvalidEntityError


class SubmitBenchmark:
    @classmethod
    def run(cls, benchmark_info: dict, force_test: bool = True):
        """Submits a new cube to the medperf platform
        Args:
            benchmark_info (dict): benchmark information
                expected keys:
                    name (str): benchmark name
                    description (str): benchmark description
                    docs_url (str): benchmark documentation url
                    demo_url (str): benchmark demo dataset url
                    demo_hash (str): benchmark demo dataset hash
                    data_preparation_mlcube (str): benchmark data preparation mlcube uid
                    reference_model_mlcube (str): benchmark reference model mlcube uid
                    evaluator_mlcube (str): benchmark data evaluator mlcube uid
        """
        ui = config.ui
        submission = cls(benchmark_info, force_test)

        with ui.interactive():
            ui.text = "Getting additional information"
            submission.get_extra_information()
            ui.print("> Completed benchmark registration information")
            ui.text = "Submitting Benchmark to MedPerf"
            updated_benchmark_body = submission.submit()
        ui.print("Uploaded")
        submission.to_permanent_path(updated_benchmark_body)
        submission.write(updated_benchmark_body)

    def __init__(self, benchmark_info: dict, force_test: bool = True):
        self.comms = config.comms
        self.ui = config.ui
        self.name = benchmark_info["name"]
        self.description = benchmark_info["description"]
        self.docs_url = benchmark_info["docs_url"]
        self.demo_url = benchmark_info["demo_url"]
        self.demo_hash = benchmark_info["demo_hash"]
        self.demo_uid = None
        self.data_preparation_mlcube = benchmark_info["data_preparation_mlcube"]
        self.reference_model_mlcube = benchmark_info["reference_model_mlcube"]
        self.data_evaluator_mlcube = benchmark_info["evaluator_mlcube"]
        self.results = None
        self.force_test = force_test

    def get_extra_information(self):
        """Retrieves information that must be populated automatically,
        like hash, generated uid and test results
        """
        tmp_uid = self.demo_hash if self.demo_hash else generate_tmp_uid()
        demo_dset_path = self.comms.get_benchmark_demo_dataset(self.demo_url, tmp_uid)
        demo_hash = get_file_sha1(demo_dset_path)
        if self.demo_hash and demo_hash != self.demo_hash:
            logging.error(
                f"Demo dataset hash mismatch: {demo_hash} != {self.demo_hash}"
            )
            raise InvalidEntityError(
                "Demo dataset hash does not match the provided hash"
            )
        self.demo_hash = demo_hash
        demo_uid, results = self.run_compatibility_test()
        self.demo_uid = demo_uid
        self.results = results

    def run_compatibility_test(self):
        """Runs a compatibility test to ensure elements are compatible,
        and to extract additional information required for submission
        """
        self.ui.print("Running compatibility test")
        data_prep = self.data_preparation_mlcube
        model = self.reference_model_mlcube
        evaluator = self.data_evaluator_mlcube
        demo_url = self.demo_url
        demo_hash = self.demo_hash
        benchmark = Benchmark.tmp(data_prep, model, evaluator, demo_url, demo_hash)
        _, data_uid, _, results = CompatibilityTestExecution.run(
            benchmark.model.id, force_test=self.force_test
        )
        # Datasets generated by the compatibility test come with a prefix to identify them
        # This is not what we need for benchmark submissions, so we need to remove it
        prefix_len = len(config.test_dset_prefix)
        data_uid = data_uid[prefix_len:]

        return data_uid, results

    def todict(self):
        return {
            "name": self.name,
            "description": self.description,
            "docs_url": self.docs_url,
            "demo_dataset_tarball_url": self.demo_url,
            "demo_dataset_tarball_hash": self.demo_hash,
            "demo_dataset_generated_uid": self.demo_uid,
            "data_preparation_mlcube": int(self.data_preparation_mlcube),
            "reference_model_mlcube": int(self.reference_model_mlcube),
            "data_evaluator_mlcube": int(self.data_evaluator_mlcube),
            "metadata": {"results": self.results.results},
            "models": [int(self.reference_model_mlcube)],  # not in the server (OK)
        }

    def submit(self):
        body = self.todict()
        updated_body = Benchmark(body).upload()
        return updated_body

    def to_permanent_path(self, bmk_dict: dict):
        """Renames the temporary benchmark submission to a permanent one

        Args:
            bmk_dict (dict): dictionary containing updated information of the submitted benchmark
        """
        bmk = Benchmark(bmk_dict)
        bmks_storage = storage_path(config.benchmarks_storage)
        old_bmk_loc = os.path.join(bmks_storage, bmk.generated_uid)
        new_bmk_loc = bmk.path
        if os.path.exists(new_bmk_loc):
            shutil.rmtree(new_bmk_loc)
        os.rename(old_bmk_loc, new_bmk_loc)

    def write(self, updated_body):
        bmk = Benchmark(updated_body)
        bmk.write()
